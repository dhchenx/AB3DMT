;; This library includes functions of loading 3D models

to setup-model [current-model-file]
  
  ; clear canvas
  clear-all
  reset-ticks
reset-timer
  
  ; create X, Y and Z axis
  if show-axis = true [
  create-turtles 1 [ set shape "line"
          set heading 90
          set color red
          set size world-width
          stamp
          die ]
  create-turtles 1 [ set shape "line"
          set color yellow
          set heading 0
          set size world-height
          stamp
          die ]
  create-turtles 1 [ set shape "line"
          set pitch 90
          set color blue
          set size world-depth
          stamp
          die ]
    
  ; Draw X, Y and Z axis line
  ask patch max-pxcor 0 0 [ set plabel "x-axis"  ]
  ask patch 0 max-pycor 0 [ set plabel "y-axis" ]
  ask patch 0 0 max-pzcor [ set plabel "z-axis" ]
    
  ]
  
  ; init temp variables
  set max_x -10000
  set min_x 10000
  set max_y -10000
  set min_y 10000
  set max_z -10000
  set min_z 10000
  set total-points 0
  let count1 0

  ; set current model-file variable to current-model-file
  set model-file current-model-file
  
  ; open the csv file
  file-open current-model-file
  let result csv:from-row file-read-line
  
  ; detect if loading is stopped by user using slider
  set break-while-loading false
  
  print (word "Starting importing..." current-model-file)
  while [ not file-at-end? ] [
     ; stop loading when opening a large csv file in a rapid way
    if break-while-loading = true [
      print("stopped by user")
      stop
    ]

    set count1 count1 + 1

    let row csv:from-row file-read-line
    ifelse count1 mod sample-rate != 0 [ ; use a point per sample-rate
      ; print("pass")
      ; pass
    ]
    [
    ; print(row)
    ; read points (x,y,z)
    let x item 1 row
    let y item 2 row
    let z item 3 row
    ; identify world size
    if x > max_x [ set max_x x]
    if x < min_x [ set min_x x]
    if y > max_y [ set max_y y]
    if y < min_y [ set min_y y]
    if z > max_z [ set max_z z]
    if z < min_z [ set min_z z]

    ; create an agent for each point
    create-turtles 1 [
      set shape "dot"
      set xcor x * scale
      set ycor y * scale
      set zcor z * scale
      set size point-size
      set color blue
      set object-type "human"
    ]
      
      ; counter the total number of points
       set total-points total-points + 1
    ]
    
    ; load part of points
    if  count1 > max-load-points and load-all != true [
      print("break")
      stop
    ]
  ]
  file-close
  
  ; show world size [x, y, z]
  print (word "point counts: " total-points)
  print (word "x range: ["   min_x "," max_x "]")
  print (word "y range: ["   min_y "," max_y "]")
  print (word "z range: ["   min_z "," max_z "]")
   
  ; print (word total-points "\t" sample-rate "\t" timer "\t" scale  "\t["   precision min_x 2 "," precision max_x 2 "]" "\t["  precision min_y 2 "," precision max_y 2 "]" "\t["   precision min_z 2 "," precision max_z 2 "]")
  print (word total-points "\t" sample-rate "\t" timer "\t" scale  "\t"  precision (max_x - min_x) 2 "\t" precision (max_y - min_y) 2  "\t"  precision (max_z - min_z) 2 )
  ; 
  print("Finished Importing!")
  
  ; init all elements
  init-go

end


to load-model-auto [my-file-path my-sample-rate my-world-min-x my-world-max-x my-world-min-y my-world-max-y my-world-min-z my-world-max-z]
  set sample-rate my-sample-rate
  set world-min-x my-world-min-x
  set world-max-x my-world-max-x
  set world-min-y my-world-min-y
  set world-max-y my-world-max-y
  set world-min-z my-world-min-z
  set world-max-z my-world-max-z

  ; set scale 10

  resize-world my-world-min-x  my-world-max-x my-world-min-y  my-world-max-y  my-world-min-z  my-world-max-z

  let current-model-file my-file-path
  setup-model current-model-file
end



to setup-new-model
  let selected user-file
  ifelse selected != false [
    set model-file selected
    setup-model model-file
  ]
  [
  ; user-message ("no file selected")
  ]
end

to reload-model
   setup-model model-file
end


